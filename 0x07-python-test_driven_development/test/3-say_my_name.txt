=============================
How to Use 3-say_my_name.py
=============================

This modules defines a function, ``say_my_name(first_name, last_name="")``.

Module Usage
=============

``say_my_name(...)`` prints "My name is <first_name> <last_name>".

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Kelvin", "Rika")
    My name is Kelvin Rika

::

    >>> say_my_name("Tinodana Charmaine", "Abinara")
    My name is Tinodana Charmaine Abinara

The parameter ```last_name``` is not compulsory(Absolute). If no last name is provided,
an empty string prints out instead.

::

    >>> say_my_name("Kelvin")
    My name is Kelvin

Validity of Names
===================

The parameters ``first_name`` and ``last_name``` must be strings. Otherwise,
a "TypeError" prompt pops

::

    >>> say_my_name(9, "Kevs")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("Kevs", ["ALX", "Holberton", "Udemy"])
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name({"Kevs": 9, "Kevs": 29}, 6.7)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

At least a (one/ singular) name must be provided.

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

